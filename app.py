# -*- coding: utf-8 -*-
"""Another copy of appdetectionstressBERTnewest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SD5dVTfiypltTf80dzs-hs3f2uDANo-g
"""

# stressdetectionbert.py

import streamlit as st
import torch
from transformers import BertForSequenceClassification, BertTokenizer
import joblib
import re
import random
import os
import gdown
import zipfile

st.set_page_config(layout="wide")

@st.cache_resource
def load_model_and_tokenizer():
    file_id = "13nu4iQSVsVzscKMG-hpoHGBGUJYrghah"
    url = f"https://drive.google.com/uc?id={file_id}"
    output = "models.zip"

    if not os.path.exists("models/bert_model"):
        if not os.path.exists("models"):
            os.makedirs("models")
        # st.info("📥 Mengunduh model dari Google Drive...")
        gdown.download(url, output, fuzzy=True, quiet=True)

        # st.write(f"Downloaded model zip file size: {os.path.getsize(output)} bytes")

        with zipfile.ZipFile(output, 'r') as zip_ref:
            zip_ref.extractall("models/")
        # st.success("✅ Model berhasil diekstrak.")

    tokenizer = BertTokenizer.from_pretrained("models/bert_model")
    model = BertForSequenceClassification.from_pretrained("models/bert_model")
    model.eval()
    return tokenizer, model

tokenizer, model = load_model_and_tokenizer()

quotes_stress = [
    "Kamu tidak sendiri. Ada banyak orang yang peduli padamu 🤗",
    "Istirahatlah sejenak, kamu sudah berusaha dengan sangat baik 🌿",
    "Tidak apa-apa merasa lelah. Kamu manusia, bukan mesin ❤️",
    "Fokus pada hari ini, satu langkah kecil tetap berarti 🐾",
    "Setiap badai pasti berlalu. Kamu kuat 💪",
    "Kamu sudah cukup. Kamu berharga. Jangan menyerah ✨",
    "Bicaralah dengan seseorang yang kamu percaya. Jangan simpan sendiri 🗣️",
    "Bernapaslah perlahan, kamu bisa melewati ini 🌬️",
]

def clean_text(text):
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    return text.strip()

def predict(text, threshold=0.65):
    text_clean = clean_text(text)
    inputs = tokenizer(
        text_clean,
        return_tensors="pt",
        truncation=True,
        padding="max_length",
        max_length=128
    )
    with torch.no_grad():
        outputs = model(**inputs)
        probs = torch.nn.functional.softmax(outputs.logits, dim=1)
        prob_stress = probs[0][1].item()

        pred = 1 if prob_stress >= threshold else 0

    return pred, prob_stress

st.title("🧠 Stress Detection from Text")

if "history" not in st.session_state:
    st.session_state.history = []

if "selected_history" not in st.session_state:
    st.session_state.selected_history = None

suggestions = [
    "I feel overwhelmed and exhausted every day.",
    "I finally finished all my work, and now I can relax with a good book and some tea.",
    "Spending the weekend with my family really helped me recharge and feel at peace.",
    "I'm constantly worried about making mistakes at work, and it's really taking a toll on me."
    "I’ve been feeling overwhelmed with deadlines lately, and I can barely sleep at night."
]


# === Main Layout ===
col1, col2 = st.columns([5, 3])

with col1:
    st.markdown("### ✍️ Input Text")
    input_text = st.text_area("", value=st.session_state.get("input_text", ""), height=180, key="input_text_box")

    if st.button("🔍 Check"):
        if input_text.strip() == "":
            st.warning("Please fill in the input column first.")
        else:
            label, prob = predict(input_text)
            st.session_state.history.append(input_text)
            st.session_state.selected_history = input_text

with col2:
    st.markdown("### 💡 Suggestion")
    for i, s in enumerate(suggestions):
        if st.button(s, key=f"suggestion_button_{i}"):
            st.session_state.input_text = s

# === Sidebar ===
with st.sidebar:
    st.header("📜 History")
    if st.session_state.history:
        for i, h in enumerate(reversed(st.session_state.history)):
            if st.button(h[:50], key=f"history_button_{i}"):
                st.session_state.selected_history = h
    else:
        st.info("Belum ada history review.")

# === Display result ===
if st.session_state.selected_history:
    st.markdown("---")
    st.subheader("📊 Detection Results:")

    label, prob = predict(st.session_state.selected_history)
    if label == 1:
        st.error(f"🚨 **STRESS** detected with probability {prob * 100:.2f}%")
        st.info(f"💬 Semangat! {random.choice(quotes_stress)}")
    else:
        st.success(f"😊 No STRESS with probability {(1 - prob) * 100:.2f}%")
        st.info("As always happy 😜🤙")